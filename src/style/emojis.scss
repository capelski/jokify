@import 'math';
@import 'variables';

$emojisNumber: 30;
$framesPerSecond: 20;
$accelerationConstant: -9.81 * 6;

.symbol {
    position: absolute;
    left: calc(50% - #{math.div($symbolSize, 2)});
    bottom: -$symbolSize * 2;
    font-size: $symbolSize;
}

.symbol.laugh:after {
    content: '\1F602';
}

.symbol.poo:after {
    content: '\1F4A9';
}

.symbol.wink-tongue:after {
    content: '\1F61C';
}

.symbol.bomb:after {
    content: '\1F4A3';
}

.symbol.boom:after {
    content: '\1F4A5';
}

.symbol.tada:after {
    content: '\1F389';
}

.symbol.halloween:after {
    content: '\1F383';
}

.symbol.dice:after {
    content: '\1F3B2';
}

@mixin parabola-core($parabolaName, $xSpeed, $ySpeed, $rotation, $parabolaTime) {
    $framesNumber: $framesPerSecond * $parabolaTime;
    $frameWeight: math.div(100, $framesNumber);
    $frameRotation: math.div($rotation, $framesNumber);

    @keyframes #{$parabolaName} {
        @for $i from 0 through math.round($framesNumber) {
            $percent: round2Decimals($i * $frameWeight);
            $time: math.div($percent, 100 * $parabolaTime);
            #{$percent + '%'} {
                $x: round2Decimals($xSpeed * $time);
                $y: ($ySpeed * $time) + ($accelerationConstant * $time * $time);
                $y: -1 *
                    round2Decimals(
                        $y
                    ); // As the translate function origen of coordinates is opposite to the conventional one, we multiply the value by -1;
                transform: translate(#{$x}vw, #{$y}vh)
                    rotate(#{round2Decimals($frameRotation * $i)}deg);
            }
        }

        #{100%} {
            $x: round2Decimals($xSpeed * $parabolaTime);
            $y: ($ySpeed * $parabolaTime) + ($accelerationConstant * $parabolaTime * $parabolaTime);
            $y: -1 * round2Decimals($y); // As the translate function origen of coordinates is opposite to the conventional one, we multiply the value by -1;
            transform: translate(#{$x}vw, #{$y}vh) rotate(#{$rotation}deg);
        }
    }
}

@mixin random-parabola($parabolaId, $finalY) {
    $angle: 60 + random(60);
    $speed: 50 + random(50);
    $rotation: 180 + random(540);

    $xSpeed: $speed * cos($angle);
    $ySpeed: $speed * sin($angle);

    // Accelerated movement equation for the parabola:
    // $finalY = 0 + $ySpeed * $parabolaTime + ($accelerationConstant * $parabolaTime * $parabolaTime);
    // 0 = -$finalY + $ySpeed * $parabolaTime + ($accelerationConstant * $parabolaTime * $parabolaTime);
    // To find the $parabolaTime necessary for the parabola to be at $finalY we need to solve the quadratic equation and take the negative result:

    $a: $accelerationConstant;
    $b: $ySpeed;
    $c: -$finalY;

    $parabolaTime: math.div((-$b - sqrt($b * $b - 4 * $a * $c)), (2 * $a));
    // @debug $a, $b, $c, $parabolaTime;

    @include parabola-core(
        'parabola-keyframe-' + $parabolaId + '-alpha',
        $xSpeed,
        $ySpeed,
        $rotation,
        $parabolaTime
    );

    @include parabola-core(
        'parabola-keyframe-' + $parabolaId + '-beta',
        $xSpeed,
        $ySpeed,
        $rotation,
        $parabolaTime
    );

    @include parabola-core(
        'parabola-keyframe-' + $parabolaId + '-gamma',
        $xSpeed,
        $ySpeed,
        $rotation,
        $parabolaTime
    );

    @include parabola-core(
        'parabola-keyframe-' + $parabolaId + '-delta',
        $xSpeed,
        $ySpeed,
        $rotation,
        $parabolaTime
    );

    .trajectory-#{$parabolaId} {
        animation-fill-mode: forwards;
    }

    .alpha-theme {
        .trajectory-#{$parabolaId} {
            animation: parabola-keyframe-#{$parabolaId}-alpha $parabolaTime + s;
        }
    }

    .beta-theme {
        .trajectory-#{$parabolaId} {
            animation: parabola-keyframe-#{$parabolaId}-beta $parabolaTime + s;
        }
    }

    .gamma-theme {
        .trajectory-#{$parabolaId} {
            animation: parabola-keyframe-#{$parabolaId}-gama $parabolaTime + s;
        }
    }

    .delta-theme {
        .trajectory-#{$parabolaId} {
            animation: parabola-keyframe-#{$parabolaId}-delta $parabolaTime + s;
        }
    }
}

@for $i from 1 through $emojisNumber {
    @include random-parabola($i, -60);
}
